//
//  LoginInteractor.swift
//  ProductList
//
//  Created by vitalii on 29.11.2020.
//  Copyright Â© 2020 Vitalii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Validator

protocol LoginBusinessLogic{
    func doSomething(request: Login.Something.Request)
    func requiredUIForScreen(request: Login.UI.Request)
    func validate(request : Login.Validate.Request)
    func doSignIn(request: Login.SignIn.Request)
	func doSignUp(request: Login.SignUp.Request)
	func onLaunchSetup(request: Login.onLaunch.Request)
}

protocol LoginDataStore
{
	var uname: String? { get set }
    var password: String? { get set }
}


class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
	var uname: String? = ""
    var password: String? = ""
    var presenter: LoginPresentationLogic?

    var validationWorker : ValidationWorker = ValidationWorker()

    var validationResultUname : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultPassword : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])


	lazy var worker: LoginWorker = {
		return LoginWorker()
	}()
    
    // MARK: Do something
    
    func doSomething(request: Login.Something.Request){
        let response = Login.Something.Response()
        presenter?.presentSomething(response: response)
    }
	
	func onLaunchSetup(request: Login.onLaunch.Request){
		
		worker.clearDatabaseIfNeeded()
		if worker.isLoggedIn() {
			let response = Login.SignIn.Response(error: nil, signInResult: true)
			self.presenter?.presentSignInAction(response: response)
		}
	}
    
    func requiredUIForScreen(request: Login.UI.Request){        
        let uiComponenets = [Login.UIComponents.spacer,
							Login.UIComponents.uname,
							Login.UIComponents.password,
							Login.UIComponents.error,
							Login.UIComponents.signInbutton,
							Login.UIComponents.signUpbutton,
							Login.UIComponents.skipButton,
							Login.UIComponents.signInOption,
							Login.UIComponents.signUpOption,
							Login.UIComponents.skipOption
							]
        
        let response = Login.UI.Response(uiComponenets: uiComponenets)
        presenter?.presentUI(response: response)
    }
    
    func validate(request : Login.Validate.Request){
        var unameResult, passwordResult : ValidationResult?

		if let value = request.uname {
			validationResultUname = validationWorker.validateUname(uname: value)
			unameResult =  validationResultUname
			uname =  value
		}
        
        if let value = request.password {
            validationResultPassword = validationWorker.validateIsEmpty(value: value)
            passwordResult =  validationResultPassword
            password =  value
        }

        let response = Login.Validate.Response(validationResultUname: unameResult, validationResultPassword: passwordResult)
        presenter?.presentValidationResult(response: response)
    }
    
    func doSignIn(request: Login.SignIn.Request){
        if(validationResultUname != .valid || validationResultPassword != .valid){
            let request = Login.Validate.Request(uname: uname, password: password)
            self.validate(request: request)
            return
        }
        
		//let response = Login.SignIn.Response(error: NSAttributedString(string: ""), signInResult: false)
		//self.presenter?.presentSignInError(response: response)
		
		worker.sendLogin(uname: uname!, pw: password!, completion: {[weak self] (success, error) in
			
			if success == true {
				let response = Login.SignIn.Response(error: NSAttributedString(string: ""), signInResult: success)
				self?.presenter?.presentSignInAction(response: response)
				self?.presenter?.presentSignInError(response: response)
			} else
			if let error = error {
				let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .error),
								  NSAttributedString.Key.font : AppManager.appStyle.font(for: .error)]
				let response = Login.SignIn.Response(error: NSAttributedString(string: error, attributes: attributes), signInResult: success)
				self?.presenter?.presentSignInError(response: response)
			}
		})
 
    }
	
	func doSignUp(request: Login.SignUp.Request){
		if(validationResultUname != .valid || validationResultPassword != .valid){
			let request = Login.Validate.Request(uname: uname, password: password)
			self.validate(request: request)
			return
		}
		//let response = Login.SignUp.Response(error: NSAttributedString(string: ""), signUpResult: false)
		//self.presenter?.presentSignUpError(response: response)
	
		worker.sendRegister(uname: uname!, pw: password!, completion: {[weak self] (success, error) in
			if success == true {
				let response = Login.SignUp.Response(error: NSAttributedString(string: ""), signUpResult: success)
				self?.presenter?.presentSignUpAction(response: response)
				self?.presenter?.presentSignUpError(response: response)
			}
			else
			if let error = error {
				let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .error),
								  NSAttributedString.Key.font : AppManager.appStyle.font(for: .error)]
				let response = Login.SignUp.Response(error:  NSAttributedString(string: error, attributes: attributes), signUpResult: success)
				self?.presenter?.presentSignUpError(response: response)
			}
			
		})
	}
	
}
