//
//  LoginPresenter.swift
//  ProductList
//
//  Created by vitalii on 29.11.2020.
//  Copyright Â© 2020 Vitalii. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginPresentationLogic{
    func presentSomething(response: Login.Something.Response)
    func presentUI(response: Login.UI.Response)
    func presentValidationResult(response : Login.Validate.Response)
    func presentSignInAction(response : Login.SignIn.Response)
	func presentSignUpAction(response : Login.SignUp.Response)
	func presentSignInError(response : Login.SignIn.Response)
	func presentSignUpError(response : Login.SignUp.Response)
}

class LoginPresenter: LoginPresentationLogic
{
    weak var viewController: LoginDisplayLogic?
    var validationWorker = ValidationWorker()

    struct strings  {
        var email = "Email address"
		var uname = "Username"
        var password =  "Password"
        var forgotPassword =  "Forgot password?"
        var signIn =  "Sign In"
        var clickableURLForgotPassword = "forgotPasswordURL"
        var clickableURLSignUp = "signUpURL"
        var signInOption =  "or sign in with"
        var gmail = "Gmail"
        var facebook = "Gmail"
        var signUp =  "Sign Up"
		var skip =  "Continue to products"
		var error = "No Error"
    }
    
    private var stringFile = strings()
    
    // MARK: Do something
    
    func presentSomething(response: Login.Something.Response){
        let viewModel = Login.Something.ViewModel()
        viewController?.displaySomething(viewModel: viewModel)
    }
    
    func presentUI(response: Login.UI.Response){
        stringFile = strings()
        let cells = getCellConfig(types: response.uiComponenets)
        let viewModel = Login.UI.ViewModel(cellConfigs: cells)
        viewController?.displayUI(viewModel: viewModel)
    }
    
    func presentValidationResult(response: Login.Validate.Response) {
        let unameError = validationWorker.getValidationErrorMessage(validationResult: response.validationResultUname)
        let passwordError = validationWorker.getValidationErrorMessage(validationResult: response.validationResultPassword)

        let viewModel = Login.Validate.ViewModel(errorMessageForUname: unameError, errorMessageForPassword: passwordError)
        
        viewController?.displayValidationErrors(viewModel: viewModel)
    }
	
	func presentSignInError(response : Login.SignIn.Response){
		let vm = Login.SignIn.ErrorViewModel(error: response.error)
		viewController?.displaySignInError(viewModel: vm)
	}
	
	func presentSignUpError(response : Login.SignUp.Response){
		let vm = Login.SignUp.ErrorViewModel(error: response.error)
		viewController?.displaySignUpError(viewModel: vm)
	}
    
    func presentSignInAction(response : Login.SignIn.Response){
        let vm = Login.SignIn.ViewModel()
        viewController?.displayProducts(viewModel: vm)
    }
	
	func presentSignUpAction(response : Login.SignUp.Response){
		let vm = Login.SignUp.ViewModel()
		viewController?.displayProducts(viewModel: vm)
	}
	

    
    private func getCellConfig(types : [Login.UIComponents]?) -> [(Login.UIComponents, BaseCellConfig)]?
	{
        stringFile = strings()
        
        guard let cellTypes = types else {
            return nil
        }
        
        var cells : [(Login.UIComponents, BaseCellConfig)] = []
        cellTypes.forEach
		{ (type) in
            switch type
			{
				case .spacer:
					var config = SeperatorTableViewCellConfig()
					config.backgroundColor = UIColor.clear
					config.insets = UIEdgeInsets(top: 150, left: 20, bottom: 50, right: 20)
					//config.size  = CGSize(width: 100, height: 100)
					cells.append((.spacer, config))
				case .uname:
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
					
					var config = TextfieldTableViewCellConfig()
					config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
					config.placeHolder = stringFile.uname
					config.backgroundColor = UIColor.clear
					config.title = NSAttributedString(string: stringFile.uname, attributes: attributes)
					config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
					cells.append((.uname, config))
				case .password:
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]

					var config = TextfieldTableViewCellConfig()
					config.placeHolder = stringFile.password
					config.title = NSAttributedString(string: stringFile.password, attributes: attributes)
					config.backgroundColor = UIColor.clear
					config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
					config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
					cells.append((.password, config))
				case .signInbutton:
					var config = ButtonTableViewCellConfig()
					
					config.insets = UIEdgeInsets(top: 10, left: 80, bottom: 10, right: 80)
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .button),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .button)]
					
					config.buttonText = NSAttributedString(string: stringFile.signIn,attributes:attributes);
					cells.append((.signInbutton, config))
				case .signInOption:
					var config = LabelTableViewCellConfig()
					config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .subtitle),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .subtitle)]
					
					config.labelText = NSAttributedString(string: stringFile.signInOption, attributes: attributes)
					config.alignment = NSTextAlignment.center
					cells.append((.signInOption, config))
				case .signUpOption:
					var config = LabelTableViewCellConfig()
					config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
					let attributes = [NSAttributedString.Key.foregroundColor : UIColor.black,
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
					config.labelText = NSAttributedString(string: stringFile.signUp,attributes:attributes);
					config.alignment = NSTextAlignment.center
					config.backgroundColor = UIColor.clear
					cells.append((.signUpOption, config))
				case .skipOption:
					var config = LabelTableViewCellConfig()
					config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
					let attributes = [NSAttributedString.Key.foregroundColor : UIColor.black,
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
					config.labelText = NSAttributedString(string: stringFile.skip, attributes:attributes);
					config.alignment = NSTextAlignment.center
					config.backgroundColor = UIColor.clear
					cells.append((.signUpOption, config))
				case .signUpbutton:
					var config = ButtonTableViewCellConfig()
					
					config.insets = UIEdgeInsets(top: 10, left: 80, bottom: 10, right: 80)
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .button),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .button)]
					
					config.buttonText = NSAttributedString(string: stringFile.signUp, attributes: attributes);
					cells.append((.signUpbutton, config))
				case .skipButton:
					var config = ButtonTableViewCellConfig()
					
					config.insets = UIEdgeInsets(top: 10, left: 80, bottom: 10, right: 80)
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .button),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .button)]
					
					config.buttonText = NSAttributedString(string: stringFile.skip, attributes: attributes);
					cells.append((.skipButton, config))
				case .error:
					var config = LabelTableViewCellConfig()
					config.insets = UIEdgeInsets(top: 0, left: 25, bottom: 0, right: 25)
					let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .error),
									  NSAttributedString.Key.font : AppManager.appStyle.font(for: .error)]
					
					config.labelText = NSAttributedString(string: stringFile.error, attributes : attributes as [NSAttributedString.Key : Any]);
					config.textColor = AppManager.appStyle.color(for: .error)
					config.font = AppManager.appStyle.font(for: .error)
					config.alignment = NSTextAlignment.left
					config.backgroundColor = UIColor.clear
					cells.append((.error, config))
			}
		}
		return cells;
	}
}
